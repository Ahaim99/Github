Git:
Git is a Distributed Version Control System whcih is used to create multiple versions of a projects and managed small and large projects with a team.

Version Control System:

1 - Local VCS.
2 - Centralized VCS.
3 - Distributed version control system.

Commands:

git
This shows all possible commands of github

pwd(present work directory)
This shows the current directory

git config user.name = "Ali Hamza"
OR
$ git config --global user.name "Ali Hamza"
This configure user Name


$ git config --global user.email "alihamza.aimviz99@gmail.com"
OR
$ git config user.email "alihamza.aimviz99@gmail.com"

This Coonfigure Email

git init
This command create current directory a Git Directory

git status
This Command Show every file change status

Three Stage Archietecture:
Working directory
Staging Area
Git Directory (Repositry)

This is use for temporary exempt a file which user doesn't want to update in next commit.
this file stored in temporary state name "staging".

Initialize First Git Project:
Create a project in a folder and open this directory on terminal

git init(Create git repositry)

Add to Staging Area:
git add --a (--a this use for place files in staging area)
OR
git add .

When staged a single file:
git add FileName

git commit -m "Portal_APX Created" (This make a commit, "-m" use for message )

git log (shows command shows all commit details)

Clone a repositry from Github:

Create a Folder in your local PC where you want to place the project.

Open a project you want to clone on github
Click on Code Button
in Close section (HTTP)
copy the URL

Open folder in terminal on local PC:
run command:
git clone paste project url here

Git Ingone:
If you don't want to upload any file in a repositry
Create a file and named it ".gitignore" it is aslo a extension.

open .gitignore file on code Editor
just type name of file
error.log

if you want to ignore all files with the extension ".log"
type
*.log

If you want to ignore a folder 
type 
FolderName/ (type folderName and /)

File Status Life Cycle in GIT:
There are 4 phases:

Untracked
Unmodified
Modified
Staged

You created a directory in your PC
when you run "git init" git takes control of this directory.

UNTRACKED:
Now you run "git status" git show you untracked files.

UNMODIFIED:
When you run "git add" it add files to staging area and show it unmodified state.

MODIFIED:
When you edit any file and run "git status" Now this shows unmodified files.

STAGED:
When we commit the code using "git commit" command it is in staged state.

Difference between Commit, Staging Area and Working Directory:

git diff --staged (Compare working directory to staged data)

git diff ( Comapre working directory to last commit)

Skip Staging Area and Directly Commit:
git commit -a -m "Commit msg here"

Unstaging and Unmodifying Files in Git:
If you want to restore a file from staging area to working directory, so run this command.
git restore --staged fileName

Unmodify:
If you want to RESTORE A FILE from Last Commit to your working directory, so run this command.
git restore FileName
OR
git checkout Filename


If you want to RESTORE WHOLE DIRECTORY from last commit to working directory, so run this command.
git checkout -f

Rename File:
Way 1:
if you want to rename your file, simply rename it in your working directory and run 'git status' it show the file1 has delete and file2 was created.
But when you staged this file "git add ." it show you "Rename: file1 to file2".
after that you Normally commit these files.

Way2:
git mv oldFileName newFileName
This Command also staged the file


Delete/Remove File:
git rm FileName
(When you want to remove File and this command also staged this file)

Note::These Files are remove and Delete When previous files are commited.

Clear a file from cache:
git rm --cached FileName
(This command is use for the conditions like when we put a file in ".gitignore" and and we can't commit this change. so the files is track usally untill you removed this file from cache.)

Remote Repositry:
When you working on a project which is connect to github repositry is called Remote Repositry.

To store your files on remote repositry using "git push"
Here are the steps:

(If your files can not push, follow these steps)
First Create SSH Key on github.com:
Goto Profile -> Settings -> SSH and GPG Keys -> Create New Key ->Put Name and Key

How to Get Key:
Seacrh "ssh key github" on Google
see command in github documentation

Command:
ssh-keygen -t ed25519 -C "alihamza.aimviz99@gmail.com"
just press Enter, Enter,.. and then Run next command

eval "$(ssh-agent -s)"
here the output "Agent pid 24198"

then Run:
ssh-add ~/.ssh/id_ed25519

to see SSH:
cat ~/.ssh/id_ed25519.pub


Now First Check if there any origin is set or not:
git remote -v

if any origin is set this command return like this.
origin  git@github.com:USERNAME/REPOSITORY.git (fetch)
origin  git@github.com:USERNAME/REPOSITORY.git (push)

Now Set new Origin: (This Command generate by github when repositry is created)
git remote set-url origin https://github.com/USERNAME/REPOSITORY.git

Push Code:
git push origin BranchName (e.g, Main, Master OR Developer Branch)

Create Branches:
Branches are created for mulitple Developers works on same project. They work on thier own branch and update code on this branch. After Finalize the work all Developer's code merge and send to "Master" or "Main" Branch.

Command to create a New Branch:
git checkout -b BranchName

Command to Switch Branch:
git checkout BranchName (e.g, Master)

Command to see all branches:
git branch (Green branch is Selected Branch)


Merge:
Master needs to merge the code of all developers who work with project.

to merge the code, first of all switch to "Master" or "Main" Brnach

to Swicth Branch:
git branch master or main

Merge:(merge one by one all branches)
git merge branchA
git merge branchA
git merge branchA
etc.
